根据byteman对行的遍历可以确定哪些输入（AT WRITE 和INVOKE add等）和输出（AT READ个INVOKE get等）在一行中。
{key ： line，{read ： {a1,a2,a3...}，write :{b1,b2,b3...} }}

问题：如何确定在一条语句中的而相关的用例在测试用例中的位置。
已知：1、能定位到数据变量改变的位置。
     2、能读取有关变量的一些基础信息（数据结构等）
     3、只对java中的内置的基本数据结构和hadoop中的内置数据结构进行处理，不考虑自己设定的数据结构。

处理：1、首先在程序的开始将list的行和列分别设为测试用例中的行和列的个数。
     2、通过read和write来监控变量的改变和发生改变的原因（即因为哪些变量而改变）。

问题：如何在运行时如何监控函数式的输入和输出：例如List.add(...),List.get(...)
已知：1、在一个语句中的调用的对象名称以及被调用的函数的名称。
     2、可以通过函数调用定位到函数调用发生时的语句，但无法与函数调用时的名称进行匹配。
     3、可以将javaparser的分析内容输入到文件中，与byteman运算时进行数据交换。

处理：1、在javaparsr阶段读取函数调用的keyword，参数，函数，以及顺序以及是否在循环内（循环内用1.1、1.1.1等表示所在循环的位置）。
     2、在byteman阶段，根据函数（如果能读取到数据结构就加上数据结构）定位，并且根据执行的循序和在循环内的情况来确定list，还有根据add函数是否有变化来确定循环是否结束。




目标：找到当KeyWord进行赋值或集合添加时相关的值在测试用例中的位置。
已知：1、能定位到数据变量改变的位置。
     2、能读取有关变量的一些基础信息（数据结构等）
     3、只对java中的内置的基本数据结构和hadoop中的内置数据结构进行处理，不考虑自己设定的数据结构。

处理：1、首先在程序的开始将list的行和列分别设为测试用例中的行和列的个数。
     2、通过read和write来监控变量的改变和发生改变的原因（即因为哪些变量而改变）。
     3、确定后通过读取赋值中的行和列的传递和get中对行和列的选择确定相关的变量。

目标：通过read和write来监控变量的改变和发生改变的原因（即因为哪些变量而改变）。
细化：1、
